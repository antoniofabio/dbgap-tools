#!/usr/bin/env Rscript

suppressMessages({
  library(plyr)
})

options(stringsAsFactors = FALSE)

args <- commandArgs(trailingOnly = TRUE)
stopifnot(length(args) == 0)

message("reading dictionary data from stdin...")
input.c <- file("stdin", open = "r", raw = TRUE)
lst <- dget(file = input.c)
close(input.c)
message("done: read data from ", length(lst), " tables")

attr2df <- function(attrs) {
  data.frame(study_id = getif(attrs, 'study_id'),
             dataset_id = getif(attrs, 'id'),
             participant_set = getif(attrs, 'participant_set'))
}

getif <- function(lst, what) {
  if(what %in% names(lst)) {
    return(lst[[ what ]])
  } else {
    return(NA_character_)
  }
}

v2df <- function(v) {
  values <- v[names(v) == "value"]
  if(length(values) > 0) {
    labels <- sapply(values, getif, what = "text")
    codes <- sapply(lapply(values, getif, what = ".attrs"), getif, 'code')
    legend <- paste(paste(codes, "=", shQuote(labels)), collapse = ", ")
  } else {
    labels <- NA_character_
    codes <- NA_character_
    legend <- NA_character_
  }
  data.frame(var_id = v$.attrs['id'],
             var_name = getif(v, "name"),
             var_description = getif(v, "description"),
             var_type = getif(v, "type"),
             var_unit = getif(v, "unit"),
             var_legend = legend)
}

parseItem <- function(item) {
  attrs.df <- attr2df(item$.attrs)
  vars.df <- ldply(unname(item[names(item) == "variable"]), v2df)
  merge(attrs.df,
        vars.df,
        by = c())
}

message("processing data...")
sink(stderr())
ans <- ldply(lst, parseItem, .progress = progress_text(style = 3))
sink()
message("done.")

message("removing duplicates...")
ans <- unique(ans)

message("writing on stdout...")
write.table(ans,
            file = "",
            quote = FALSE, row.names = FALSE, col.names = TRUE, sep = "\t")
message("analysis completed.")
